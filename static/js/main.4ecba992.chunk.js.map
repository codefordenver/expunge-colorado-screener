{"version":3,"sources":["data/screenerModel.js","data/demographicModel.js","api/apiSurveyService.js","Components/DemographicSurvey.js","Components/ScreenerOutcome.js","Components/ScreenerSurvey.js","hooks/useLocalStorage.js","assets/logo.png","Components/IntroScreen.js","api/apiContentService.js","App.js","index.js"],"names":["Survey","Instance","register","params","waitingPeriod","completedDate","Date","dateYear","getFullYear","setFullYear","now","SCREENER_SURVEY_MODEL","title","clearInvisibleValues","triggers","type","expression","setToName","setValue","pages","name","questions","choices","isRequired","visibleIf","inputType","DEMOGRAPHIC_SURVEY_MODEL","hasOther","otherText","validators","DEV_URL","putSurveyResult","surveyType","surveyResponse","a","axios","put","result","console","log","myCss","navigationButton","header","container","DemographicSurvey","surveyModel","uuid","useState","isComplete","setIsComplete","survey","data","css","model","onComplete","ScreenerOutcome","outcomeContent","loading","demoSurveyModel","className","documentToReactComponents","body","richTextRenderOptions","renderNode","BLOCKS","EMBEDDED_ASSET","node","file","target","fields","src","url","panel","footer","ProgressBar","percent","style","width","ScreenerSurvey","version","setScreenerStarted","key","initialValue","item","window","localStorage","getItem","JSON","parse","error","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","useLocalStorage","cache","setCache","outcome","setOutcome","setLoading","filteredOutcomeContent","setFilteredOutcomeContent","page","setPage","percentProgress","pageCount","handleComplete","foundContentEntry","find","id","uuidv4","handleValueChanged","currentPageNo","useEffect","add","onValueChanged","onClick","clear","IntroScreen","introContent","description","getContent","get","content","showPreviewBeforeComplete","shaObj","jsSHA","update","hash","getHash","screenerStarted","setOutcomeContent","setIntroContent","setError","res","introEntry","outcomeEntries","filter","sys","contentType","map","StrictMode","logo","href","ReactDOM","render","document","getElementById"],"mappings":"4NAuDAA,kBAAuBC,SAASC,SAAS,uBArDzC,SAA6BC,GACzB,GAAIA,EAAO,GAAI,CACX,IAAIC,EAAgBD,EAAO,GACvBE,EAAgB,IAAIC,KAAKH,EAAO,IAChCI,EAAWF,EAAcG,cAAgBJ,EAE7C,OADmBC,EAAcI,YAAYF,GAC1BD,KAAKI,MACb,MAEA,SA6CnBV,kBAAuBC,SAASC,SAAS,qBAxCzC,SAA2BC,GAoCvB,MAlCmB,CACf,iBAAkB,aAClB,iBAAkB,aAClB,iBAAkB,aAClB,sBAAuB,aACvB,qBAAsB,aACtB,8BAA+B,aAC/B,qBAAsB,aACtB,2BAA4B,aAC5B,gCAAiC,aACjC,uCAAwC,aACxC,kBAAmB,aACnB,2CAA4C,aAC5C,iBAAkB,aAClB,uDAAwD,aACxD,yDAA0D,aAC1D,8BAA+B,aAC/B,cAAe,aACf,gBAAiB,EACjB,qBAAsB,EACtB,sBAAuB,EACvB,sBAAuB,EACvB,2BAA4B,EAC5B,iBAAkB,EAClB,iBAAkB,EAClB,iBAAkB,EAClB,sBAAuB,EACvB,sBAAuB,EACvB,sBAAuB,EACvB,oBAAqB,EACrB,sBAAuB,EACvB,sBAAuB,YAhCdA,EAAO,OAyCxB,IAiLeQ,EAjLe,CAC1BC,MAAO,qCACPC,qBAAsB,WACtBC,SAAU,CACN,CACIC,KAAM,WACNC,WACI,+SACJC,UAAW,UACXC,SAAU,cAEd,CACIH,KAAM,WACNC,WACI,sGACJC,UAAW,UACXC,SAAU,YAEd,CACIH,KAAM,WACNC,WACI,qRACJC,UAAW,UACXC,SAAU,aAGlBC,MAAO,CACH,CACIC,KAAM,uBACNC,UAAW,CACP,CACIN,KAAM,aACNO,QAAS,CAAC,MAAO,MACjBC,YAAY,EACZH,KAAM,iBACNR,MAAO,qDAEX,CACIG,KAAM,aACNO,QAAS,CAAC,MAAO,MACjBC,YAAY,EACZH,KAAM,SACNR,MAAO,wDACPY,UAAW,4BAEf,CACIT,KAAM,aACNO,QAAS,CAAC,MAAO,KAAM,YACvBC,YAAY,EACZH,KAAM,cACNR,MAAO,gCACPY,UAAW,sBAIvB,CACIJ,KAAM,2BACNI,UAAW,uBACXH,UAAW,CACP,CACIN,KAAM,aACNO,QAAS,CAAC,MAAO,MACjBC,YAAY,EACZH,KAAM,0BACNR,MACI,4EAER,CACIG,KAAM,aACNO,QAAS,CAAC,MAAO,KAAM,YACvBC,YAAY,EACZH,KAAM,6BACNR,MACI,oFACJY,UAAW,oCAEf,CACIT,KAAM,WACNO,QAAS,CACL,iBACA,iBACA,iBACA,sBACA,qBACA,8BACA,qBACA,2BACA,gCACA,uCACA,kBACA,2CACA,iBACA,uDACA,yDACA,8BACA,cACA,gBACA,qBACA,sBACA,sBACA,2BACA,iBACA,iBACA,iBACA,sBACA,sBACA,sBACA,oBACA,sBACA,uBAEJC,YAAY,EACZH,KAAM,eACNR,MAAO,2CACPY,UAAW,yCAIvB,CACIJ,KAAM,yBACNI,UAAW,iEACXH,UAAW,CACP,CACIN,KAAM,aACNO,QAAS,CAAC,MAAO,KAAM,YACvBC,YAAY,EACZH,KAAM,sBACNR,MACI,wLAER,CACIG,KAAM,OACNU,UAAW,OACXF,YAAY,EACZH,KAAM,mBACNR,MACI,4OACJY,UAAW,mCAIvB,CACIJ,KAAM,kBACNI,UACI,8GACJH,UAAW,CACP,CACIN,KAAM,aACNO,QAAS,CAAC,MAAO,KAAM,YACvBC,YAAY,EACZH,KAAM,yBACNR,MACI,iHAER,CACIG,KAAM,aACNO,QAAS,CAAC,MAAO,KAAM,YACvBC,YAAY,EACZH,KAAM,kBACNR,MACI,wFACJY,UAAW,oCAEf,CACIT,KAAM,aACNO,QAAS,CAAC,MAAO,KAAM,YACvBC,YAAY,EACZH,KAAM,gBACNR,MACI,0GACJY,UAAW,gC,8BCjFhBE,EAnJkB,CAC7Bd,MAAO,mEACPC,qBAAsB,WACtBM,MAAO,CACH,CACIC,KAAM,kBACNC,UAAW,CACP,CACID,KAAM,oBACNR,MAAO,+CACPG,KAAM,WACNQ,YAAY,EACZI,UAAU,EACVC,UAAW,0BACXN,QAAS,CACL,UACA,aACA,gBACA,gBACA,yBAGR,CACIF,KAAM,gBACNR,MAAO,2CACPG,KAAM,WACNQ,YAAY,EACZI,UAAU,EACVC,UAAW,0BACXN,QAAS,CACL,QACA,yBACA,kBACA,kCACA,mCACA,4CACA,QACA,yBAGR,CACIF,KAAM,WACNR,MAAO,0BACPG,KAAM,WACNQ,YAAY,EACZD,QAAS,CACL,kBACA,kBACA,kBACA,kBACA,kBACA,kBACA,oBACA,yBAGR,CACIF,KAAM,mBACNR,MAAO,uDACPG,KAAM,WACNQ,YAAY,EACZD,QAAS,CACL,QACA,UACA,WACA,YACA,OACA,OACA,UACA,aACA,UACA,WACA,cACA,UACA,WACA,UACA,SACA,QACA,SACA,UACA,UACA,QACA,SACA,UACA,UACA,WACA,SACA,QACA,WACA,WACA,WACA,UACA,YACA,QACA,aACA,OACA,WACA,UACA,aACA,UACA,QACA,OACA,UACA,SACA,YACA,WACA,SACA,QACA,QACA,OACA,WACA,SACA,UACA,SACA,aACA,aACA,QACA,WACA,WACA,aACA,WACA,SACA,SACA,aACA,OACA,OACA,uBACA,QAGR,CACIF,KAAM,QACNR,MACI,0JACJG,KAAM,OACNQ,YAAY,EACZM,WAAY,CACR,CACId,KAAM,e,gBCvI5Be,EAAU,6D,SAEDC,E,gFAAf,WAA+BC,EAAYC,GAA3C,eAAAC,EAAA,sEACuBC,IAAMC,IAAN,UAAaN,EAAb,wBACff,KAAMiB,GACHC,IAHX,cACQI,EADR,OAKIC,QAAQC,IAAIF,GALhB,kBAMWA,GANX,4C,sBCDA,IAAMG,EAAQ,CACVC,iBAAkB,UAClBC,OAAQ,SACRC,UAAW,aA+BAC,MA5Bf,YAAmD,IAAtBC,EAAqB,EAArBA,YAAaC,EAAQ,EAARA,KAAQ,EACVC,oBAAS,GADC,mBACvCC,EADuC,KAC3BC,EAD2B,iDAG9C,WAA8BC,GAA9B,SAAAhB,EAAA,6DACIe,GAAc,GADlB,SAG0BlB,EAAgB,cAAD,YAAC,eAC3BmB,EAAOC,MADmB,IAE7BL,KAAMA,GAAQ,QAL1B,0DAH8C,sBAa9C,OACI,8BACME,EAOE,kEANA,cAAC,SAAD,CACII,IAAKZ,EACLa,MAAOR,EACPS,WAnB8B,iDCqBnCC,EAvBS,SAAC,GAAuC,IAArCT,EAAoC,EAApCA,KAAMU,EAA8B,EAA9BA,eAAgBC,EAAc,EAAdA,QACvCC,EAAkB,IAAI1D,QAAa0B,GAEzC,OACI,gCACI,qBAAKiC,UAAU,oBAAf,SACKF,EACG,uBAEA,qCACI,6BAAKD,EAAe5C,QACnBgD,oCACGJ,EAAeK,KACfC,QAKhB,cAAC,EAAD,CAAmBjB,YAAaa,EAAiBZ,KAAMA,QAO7DgB,EAAwB,CAC1BC,WAAW,eACNC,SAAOC,gBAAiB,SAACC,GAAU,IACxBC,EAASD,EAAKf,KAAKiB,OAAOC,OAA1BF,KACR,OAAO,qBAAKG,IAAKH,EAAKI,U,YC3B5B/B,EAAQ,CACVC,iBAAkB,UAClBC,OAAQ,SACRC,UAAW,YACX6B,MAAO,CACHC,OAAQ,kBAqFhB,IAAMC,EAAc,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACnB,OACI,sBAAKhB,UAAU,qBAAf,UACI,qBAAKA,UAAU,iBAAiBiB,MAAO,CAAEC,MAAM,GAAD,OAAKF,EAAL,QAC9C,qBAAKhB,UAAU,4BAKZmB,EA1Ff,YAAuF,IAA7DjC,EAA4D,EAA5DA,YAAakC,EAA+C,EAA/CA,QAASC,EAAsC,EAAtCA,mBAAoBxB,EAAkB,EAAlBA,eAAkB,ECjBvE,SAAyByB,EAAKC,GAAe,IAAD,EACjBnC,oBAAS,WAC3C,IACI,IAAMoC,EAAOC,OAAOC,aAAaC,QAAQL,GACzC,OAAOE,EAAOI,KAAKC,MAAML,GAAQD,EACnC,MAAOO,GAEL,OADAnD,QAAQC,IAAIkD,GACLP,MAPwC,mBAChDQ,EADgD,KACnCC,EADmC,KAoBvD,MAAO,CAACD,EATS,SAACE,GACd,IACI,IAAMC,EAAeD,aAAiBE,SAAWF,EAAMF,GAAeE,EACtED,EAAeE,GACfT,OAAOC,aAAaU,QAAQd,EAAKM,KAAKS,UAAUH,IAClD,MAAOJ,GACLnD,QAAQC,IAAIkD,MDCMQ,CAAgB,iBAAkB,MADsB,mBAC3EC,EAD2E,KACpEC,EADoE,OAEpDpD,mBAAS,IAF2C,mBAE3EqD,EAF2E,KAElEC,EAFkE,OAGpDtD,oBAAS,GAH2C,mBAG3EU,EAH2E,KAGlE6C,EAHkE,OAItBvD,mBAAS,IAJa,mBAI3EwD,EAJ2E,KAInDC,EAJmD,OAK1DzD,mBAAS,GALiD,mBAK3E0D,EAL2E,KAKrEC,EALqE,KAM5EC,EAAmBF,EAAO5D,EAAY+D,UAAa,IANyB,SAwBnEC,EAxBmE,8EAwBlF,WAA8B3D,GAA9B,iBAAAhB,EAAA,6DACIwE,EAAQ7D,EAAY+D,WACpBP,EAAWnD,EAAOC,KAAKiD,SACjBU,EAAoBtD,EAAeuD,MACrC,SAAC5B,GAAD,OAAUA,EAAK6B,KAAO9D,EAAOC,KAAKiD,WAEtCI,EAA0BM,GACpBhE,EAAOmE,cAPjB,SAS0BlF,EAAgB,mBAAD,YAAC,eAC3BmB,EAAOC,MADmB,IAE7BL,UAXZ,qBAeIqD,EAAS,CAAErD,SAff,6CAxBkF,sBA0ClF,SAASoE,EAAT,GAAsD,IAAxBC,EAAuB,EAAvBA,cAAehE,EAAQ,EAARA,KACzCuD,EAAQS,EAAgB,GACxBhB,EAAS,2BAAKD,GAAN,IAAaiB,gBAAehE,UAaxC,OAjDAiE,qBAAU,WACNvE,EAAYS,WAAW+D,IAAIR,GAC3BhE,EAAYyE,eAAeD,IAAIH,IACtB,OAALhB,QAAK,IAALA,OAAA,EAAAA,EAAOnB,WAAYA,GACnBlC,EAAYM,KAAO+C,EAAM/C,KACzBN,EAAYsE,cAAgBjB,EAAMiB,cAClCT,EAAQR,EAAMiB,cAAgB,IAE9BhB,EAAS,CAAEpB,cAEhB,IAEHqC,qBAAU,WACNb,EAAuBS,IAAMV,GAAW,KACzC,CAACC,IAoCA,sBAAK5C,UAAU,OAAf,UACKyC,EACG,cAAC,EAAD,CACItD,KAAI,OAAEoD,QAAF,IAAEA,OAAF,EAAEA,EAAOpD,KACbU,eAAgB+C,EAChB9C,QAASA,IAGb,qCACI,cAAC,EAAD,CAAakB,QAASgC,IACtB,cAAC,SAAD,CAAevD,IAAKZ,EAAOa,MAAOR,OAI1C,qBAAKc,UAAU,cAAf,SACI,wBAAQ4D,QA1BpB,WACI1E,EAAY2E,QACZrB,EAAS,MACTG,GAAW,GACXE,EAA0B,IAC1BH,EAAW,MACXK,EAAQ,GACR1B,GAAmB,IAmBarB,UAAU,UAAlC,yBE5FD,MAA0B,iCCqB1B8D,G,MAjBK,SAAC,GAA0C,IAAxCzC,EAAuC,EAAvCA,mBAAoB0C,EAAmB,EAAnBA,aACvC,OACI,sBAAK/D,UAAU,YAAf,UACI,6BAAK+D,EAAa9G,QAClB,4BACKgD,oCACG8D,EAAaC,YACb7D,KAGR,wBAAQH,UAAU,UAAU4D,QAAS,kBAAMvC,GAAmB,IAA9D,uBASNlB,EAAwB,CAC1BC,WAAW,eACNC,SAAOC,gBAAiB,SAACC,GAAU,IACxBC,EAASD,EAAKf,KAAKiB,OAAOC,OAA1BF,KACR,OAAO,qBAAKG,IAAKH,EAAKI,UCzB5BzC,EAAU,6D,SAED8F,I,2EAAf,4BAAA1F,EAAA,sEAC0BC,IAAM0F,IAAN,UAAa/F,EAAb,aAD1B,cACUgG,EADV,yBAEWA,GAFX,4C,sBCMA,IAAMjF,EAAc,IAAI7C,QAAaW,GACrCkC,EAAYkF,0BAA4B,wBAKxC,IAAMC,EAAS,IAAIC,IAAM,QAAS,QAElCD,EAAOE,OAAO3C,KAAKS,UAAUrF,IAC7B,IAAMwH,EAAOH,EAAOI,QAAQ,OAEb,aAAO,IAAD,EAC6BrF,oBAAS,GADtC,mBACVsF,EADU,KACOrD,EADP,OAE2BjC,mBAAS,MAFpC,mBAEVS,EAFU,KAEM8E,EAFN,OAGuBvF,mBAAS,MAHhC,mBAGV2E,EAHU,KAGIa,EAHJ,OAIaxF,oBAAS,GAJtB,mBAIVU,EAJU,KAID6C,EAJC,OAKSvD,oBAAS,GALlB,mBAKV0C,EALU,KAKH+C,EALG,KAyBjB,OAlBApB,oBAAS,sBAAC,gCAAAlF,EAAA,6DACNoE,GAAW,GADL,kBAGgBsB,IAHhB,OAGIa,EAHJ,OAIIC,EAAaD,EAAItF,KAAK4D,MAAK,SAAC5B,GAAD,MAA6B,UAAnBA,EAAKd,OAAO2C,MAAgB3C,OACvEkE,EAAgBG,GACVC,EAAiBF,EAAItF,KACtByF,QAAO,SAACzD,GAAD,MAA0C,oBAAhCA,EAAK0D,IAAIC,YAAYD,IAAI7B,MAC1C+B,KAAI,SAAC5D,GAAD,OAAUA,EAAKd,UACxBiE,EAAkBK,GAThB,kDAWFrG,QAAQC,IAAR,MACAiG,GAAS,GAZP,yBAcFlC,GAAW,GAdT,6EAgBP,IAGC,cAAC,IAAM0C,WAAP,UACI,sBAAKrF,UAAU,MAAf,UACI,qBAAKW,IAAK2E,EAAMtF,UAAU,SAC1B,oBAAIA,UAAU,cAAd,8CACC0E,EACG,cAAC,EAAD,CACIxF,YAAaA,EACbkC,QAASoD,EACTnD,mBAAoBA,EACpBxB,eAAgBA,IAGpB,qCACKC,GAAW,uBACXiE,GACG,mCACI,cAAC,EAAD,CACI1C,mBAAoBA,EACpB0C,aAAcA,MAIzBjC,GACG,mCACI,6FAEU,IACN,mBAAGyD,KAAK,8BAAR,+CCtEpCC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.4ecba992.chunk.js","sourcesContent":["import * as Survey from 'survey-react';\n\nfunction hasEnoughTimePassed(params) {\n    if (params[1]) {\n        let waitingPeriod = params[0];\n        let completedDate = new Date(params[1]);\n        let dateYear = completedDate.getFullYear() + waitingPeriod;\n        let eligibleDate = completedDate.setFullYear(dateYear);\n        if (eligibleDate < Date.now()) {\n            return 'Yes';\n        } else {\n            return 'No';\n        }\n    }\n}\n\nfunction chargeEligibility(params) {\n    let charge = params[0];\n    const chargesMap = {\n        'Class 1 Felony': 'Ineligible',\n        'Class 2 Felony': 'Ineligible',\n        'Class 3 Felony': 'Ineligible',\n        'Class 1 Drug Felony': 'Ineligible',\n        'Felony Sex offense': 'Ineligible',\n        'Felony Drug Special Offense': 'Ineligible',\n        'Felony Child abuse': 'Ineligible',\n        'Felony Domestic violence': 'Ineligible',\n        'Felony Murder or manslaughter': 'Ineligible',\n        'Felony Vehicular homicide or assault': 'Ineligible',\n        'Felony Menacing': 'Ineligible',\n        'Felony First or Second Degree Kidnapping': 'Ineligible',\n        'Felony Robbery': 'Ineligible',\n        'Felony First or Second Degree Burglary of a Dwelling': 'Ineligible',\n        'Felony Retaliating or Intimidating a Witness or Victim': 'Ineligible',\n        'Misdemeanor traffic offense': 'Ineligible',\n        'DUI or DWAI': 'Ineligible',\n        'Petty offense': 1,\n        'Petty drug offense': 1,\n        'Class 2 Misdemeanor': 2,\n        'Class 3 Misdemeanor': 2,\n        'Drug misdemeanor offense': 2,\n        'Class 4 Felony': 3,\n        'Class 5 Felony': 3,\n        'Class 6 Felony': 3,\n        'Class 3 Drug Felony': 3,\n        'Class 4 Drug Felony': 3,\n        'Class 1 Misdemeanor': 3,\n        'Municipal offense': 3,\n        'Class 2 Drug Felony': 5,\n        \"Don't Know/Not Sure\": 'Not Sure',\n    };\n\n    return chargesMap[charge];\n}\n\nSurvey.FunctionFactory.Instance.register('hasEnoughTimePassed', hasEnoughTimePassed);\nSurvey.FunctionFactory.Instance.register('chargeEligibility', chargeEligibility);\n\nconst SCREENER_SURVEY_MODEL = {\n    title: 'Tell us some more about your case.',\n    clearInvisibleValues: 'onHidden',\n    triggers: [\n        {\n            type: 'setvalue',\n            expression:\n                \"{coloradoArrest} = 'No' or {over18} = 'No' or {federalCase} = 'Yes' or chargeEligibility({chargeToSeal}) = 'Ineligible' or {completedSentencing} = 'No' or hasEnoughTimePassed(chargeEligibility({chargeToSeal}), {enoughTimePassed}) = 'No' or {paidRestitutionAndFees} = 'No' or {attemptedToSeal} = 'Yes'\",\n            setToName: 'outcome',\n            setValue: 'ineligible',\n        },\n        {\n            type: 'setvalue',\n            expression:\n                \"{sealingArrestRecordOnly} = 'Yes' or {chargeDismissedOrAcquitted} = 'Yes' or {anyNewOffense} = 'No'\",\n            setToName: 'outcome',\n            setValue: 'eligible',\n        },\n        {\n            type: 'setvalue',\n            expression:\n                \"{federalCase} = 'Not Sure' or {chargeToSeal} = 'Not Sure' or {completedSentencing} = 'Not Sure' or {chargeDismissedOrAcquitted} = 'Not Sure' or {paidRestitutionAndFees} = 'Not Sure' or {attemptedToSeal} = 'Not Sure' or {anyNewOffense} = 'Yes' or {anyNewOffense} = 'Not Sure'\",\n            setToName: 'outcome',\n            setValue: 'needInfo',\n        },\n    ],\n    pages: [\n        {\n            name: 'preliminaryQuestions',\n            questions: [\n                {\n                    type: 'radiogroup',\n                    choices: ['Yes', 'No'],\n                    isRequired: true,\n                    name: 'coloradoArrest',\n                    title: 'Did your arrest or charge take place in Colorado?',\n                },\n                {\n                    type: 'radiogroup',\n                    choices: ['Yes', 'No'],\n                    isRequired: true,\n                    name: 'over18',\n                    title: 'Were you over 18 at the time of the arrest or charge?',\n                    visibleIf: \"{coloradoArrest} = 'Yes'\",\n                },\n                {\n                    type: 'radiogroup',\n                    choices: ['Yes', 'No', 'Not Sure'],\n                    isRequired: true,\n                    name: 'federalCase',\n                    title: 'Was your case a federal case?',\n                    visibleIf: \"{over18} = 'Yes'\",\n                },\n            ],\n        },\n        {\n            name: 'sealingArrestsAndCharges',\n            visibleIf: \"{federalCase} = 'No'\",\n            questions: [\n                {\n                    type: 'radiogroup',\n                    choices: ['Yes', 'No'],\n                    isRequired: true,\n                    name: 'sealingArrestRecordOnly',\n                    title:\n                        'Were you arrested, but not charged & seeking to seal arrest record only?',\n                },\n                {\n                    type: 'radiogroup',\n                    choices: ['Yes', 'No', 'Not Sure'],\n                    isRequired: true,\n                    name: 'chargeDismissedOrAcquitted',\n                    title:\n                        'Were all charges in your case dismissed or were you acquitted (found not guilty)?',\n                    visibleIf: \"{sealingArrestRecordOnly} = 'No'\",\n                },\n                {\n                    type: 'dropdown',\n                    choices: [\n                        'Class 1 Felony',\n                        'Class 2 Felony',\n                        'Class 3 Felony',\n                        'Class 1 Drug Felony',\n                        'Felony Sex offense',\n                        'Felony Drug Special Offense',\n                        'Felony Child abuse',\n                        'Felony Domestic violence',\n                        'Felony Murder or manslaughter',\n                        'Felony Vehicular homicide or assault',\n                        'Felony Menacing',\n                        'Felony First or Second Degree Kidnapping',\n                        'Felony Robbery',\n                        'Felony First or Second Degree Burglary of a Dwelling',\n                        'Felony Retaliating or Intimidating a Witness or Victim',\n                        'Misdemeanor traffic offense',\n                        'DUI or DWAI',\n                        'Petty offense',\n                        'Petty drug offense',\n                        'Class 2 Misdemeanor',\n                        'Class 3 Misdemeanor',\n                        'Drug misdemeanor offense',\n                        'Class 4 Felony',\n                        'Class 5 Felony',\n                        'Class 6 Felony',\n                        'Class 3 Drug Felony',\n                        'Class 4 Drug Felony',\n                        'Class 1 Misdemeanor',\n                        'Municipal offense',\n                        'Class 2 Drug Felony',\n                        \"Don't Know/Not Sure\",\n                    ],\n                    isRequired: true,\n                    name: 'chargeToSeal',\n                    title: 'What conviction are you looking to seal?',\n                    visibleIf: \"{chargeDismissedOrAcquitted} = 'No'\",\n                },\n            ],\n        },\n        {\n            name: 'convictionRequirements',\n            visibleIf: \"{federalCase} = 'No' and chargeEligibility({chargeToSeal}) > 0\",\n            questions: [\n                {\n                    type: 'radiogroup',\n                    choices: ['Yes', 'No', 'Not Sure'],\n                    isRequired: true,\n                    name: 'completedSentencing',\n                    title:\n                        'If you were sentenced at the end of your case, have you completed all sentencing, including supervised or unsupervised probation, parole, community corrections, incarceration, etc?',\n                },\n                {\n                    type: 'text',\n                    inputType: 'date',\n                    isRequired: true,\n                    name: 'enoughTimePassed',\n                    title:\n                        'In most cases, a certain period of time must go by from the date of conviction, or the final date of completing a sentence, before you can apply to seal your record. What is the month & year you completed your sentencing/supervision?',\n                    visibleIf: \"{completedSentencing} = 'Yes'\",\n                },\n            ],\n        },\n        {\n            name: 'withinTimeFrame',\n            visibleIf:\n                \"{federalCase} = 'No' and hasEnoughTimePassed(chargeEligibility({chargeToSeal}), {enoughTimePassed}) = 'Yes'\",\n            questions: [\n                {\n                    type: 'radiogroup',\n                    choices: ['Yes', 'No', 'Not Sure'],\n                    isRequired: true,\n                    name: 'paidRestitutionAndFees',\n                    title:\n                        'Have you paid all restitution, fines, court costs, late fees or other fees ordered by the Court in your case?',\n                },\n                {\n                    type: 'radiogroup',\n                    choices: ['Yes', 'No', 'Not Sure'],\n                    isRequired: true,\n                    name: 'attemptedToSeal',\n                    title:\n                        'Have you attempted to seal your record for this conviction within the past 12 months?',\n                    visibleIf: \"{paidRestitutionAndFees} = 'Yes'\",\n                },\n                {\n                    type: 'radiogroup',\n                    choices: ['Yes', 'No', 'Not Sure'],\n                    isRequired: true,\n                    name: 'anyNewOffense',\n                    title:\n                        'Have you been convicted of or charged with another offense after the conviction you are trying to seal?',\n                    visibleIf: \"{attemptedToSeal} = 'No'\",\n                },\n            ],\n        },\n    ],\n};\n\nexport default SCREENER_SURVEY_MODEL;\n","const DEMOGRAPHIC_SURVEY_MODEL = {\n    title: 'Feel free to provide additional demographic data about yourself.',\n    clearInvisibleValues: 'onHidden',\n    pages: [\n        {\n            name: 'demographicInfo',\n            questions: [\n                {\n                    name: 'expungementReason',\n                    title: 'What is your reason for seeking expungement?',\n                    type: 'checkbox',\n                    isRequired: false,\n                    hasOther: true,\n                    otherText: 'Other (please describe)',\n                    choices: [\n                        'Housing',\n                        'Employment',\n                        'Financial Aid',\n                        'Remove Stigma',\n                        'Prefer not to answer',\n                    ],\n                },\n                {\n                    name: 'raceEthnicity',\n                    title: 'I identify my race/ethnic background as:',\n                    type: 'checkbox',\n                    isRequired: false,\n                    hasOther: true,\n                    otherText: 'Other (please describe)',\n                    choices: [\n                        'Asian',\n                        'Black/African American',\n                        'Hispanic/Latinx',\n                        'Middle Eastern or North African',\n                        'Native American or Alaska Native',\n                        'Native Hawaiian or Other Pacific Islander',\n                        'White',\n                        'Prefer not to answer',\n                    ],\n                },\n                {\n                    name: 'ageRange',\n                    title: 'What is your age range?',\n                    type: 'dropdown',\n                    isRequired: false,\n                    choices: [\n                        '18-24 years old',\n                        '25-34 years old',\n                        '35-44 years old',\n                        '45-54 years old',\n                        '55-64 years old',\n                        '65-74 years old',\n                        '75 years or older',\n                        'Prefer not to answer',\n                    ],\n                },\n                {\n                    name: 'countyInColorado',\n                    title: 'What county in Colorado did your case take place in?',\n                    type: 'dropdown',\n                    isRequired: false,\n                    choices: [\n                        'Adams',\n                        'Alamosa',\n                        'Arapahoe',\n                        'Archuleta',\n                        'Baca',\n                        'Bent',\n                        'Boulder',\n                        'Broomfield',\n                        'Chaffee',\n                        'Cheyenne',\n                        'Clear Creek',\n                        'Conejos',\n                        'Costilla',\n                        'Crowley',\n                        'Custer',\n                        'Delta',\n                        'Denver',\n                        'Dolores',\n                        'Douglas',\n                        'Eagle',\n                        'Elbert',\n                        'El Paso',\n                        'Fremont',\n                        'Garfield',\n                        'Gilpin',\n                        'Grand',\n                        'Gunnison',\n                        'Hinsdale',\n                        'Huerfano',\n                        'Jackson',\n                        'Jefferson',\n                        'Kiowa',\n                        'Kit Carson',\n                        'Lake',\n                        'La Plata',\n                        'Larimer',\n                        'Las Animas',\n                        'Lincoln',\n                        'Logan',\n                        'Mesa',\n                        'Mineral',\n                        'Moffat',\n                        'Montezuma',\n                        'Montrose',\n                        'Morgan',\n                        'Otero',\n                        'Ouray',\n                        'Park',\n                        'Phillips',\n                        'Pitkin',\n                        'Prowers',\n                        'Pueblo',\n                        'Rio Blanco',\n                        'Rio Grande',\n                        'Routt',\n                        'Saguache',\n                        'San Juan',\n                        'San Miguel',\n                        'Sedgwick',\n                        'Summit',\n                        'Teller',\n                        'Washington',\n                        'Weld',\n                        'Yuma',\n                        'Prefer not to answer',\n                        'N/A',\n                    ],\n                },\n                {\n                    name: 'email',\n                    title:\n                        'If you would like to sign up for our emailing list to be notified of any future events or recording sealing clinics, please provide your email address.',\n                    type: 'text',\n                    isRequired: false,\n                    validators: [\n                        {\n                            type: 'email',\n                        },\n                    ],\n                },\n            ],\n        },\n    ],\n};\n\nexport default DEMOGRAPHIC_SURVEY_MODEL;\n","//Calls to API gateway rest API , integrated with DynamoDB to store data.\nimport axios from 'axios';\n\nconst DEV_URL = 'https://7h8jqdiilc.execute-api.us-west-2.amazonaws.com/dev'; //obviously change this later\n\nasync function putSurveyResult(surveyType, surveyResponse) {\n    let result = await axios.put(`${DEV_URL}/result`, {\n        type: surveyType,\n        ...surveyResponse,\n    });\n    console.log(result);\n    return result;\n}\n\n//TODO: Add authorization requirement to this in API Gateway\nasync function getSurveyResult(uuid) {\n    let result = await axios.get(`${DEV_URL}/result?uuid=${uuid}`);\n    console.log(result);\n    return result;\n}\n\nexport { putSurveyResult, getSurveyResult };\n","import React, { useState } from 'react';\nimport * as Survey from 'survey-react';\nimport { getSurveyResult, putSurveyResult } from '../api/apiSurveyService';\n\nconst myCss = {\n    navigationButton: 'btn-nav',\n    header: 'header',\n    container: 'container',\n};\n\nfunction DemographicSurvey({ surveyModel, uuid }) {\n    const [isComplete, setIsComplete] = useState(false);\n\n    async function handleComplete(survey) {\n        setIsComplete(true);\n        if (process.env.REACT_APP_DYNAMO_STORE === 'true') {\n            const res = await putSurveyResult('demographic', {\n                ...survey.data,\n                uuid: uuid || null,\n            });\n        }\n    }\n\n    return (\n        <div>\n            {!isComplete ? (\n                <Survey.Survey\n                    css={myCss}\n                    model={surveyModel}\n                    onComplete={handleComplete}\n                />\n            ) : (\n                'Thank you for providing the additional demographic information.'\n            )}\n        </div>\n    );\n}\n\nexport default DemographicSurvey;\n","import React from 'react';\nimport * as Survey from 'survey-react';\nimport { BLOCKS } from '@contentful/rich-text-types';\nimport { documentToReactComponents } from '@contentful/rich-text-react-renderer';\n\nimport DEMOGRAPHIC_SURVEY_MODEL from '../data/demographicModel';\nimport DemographicSurvey from './DemographicSurvey';\n\nconst ScreenerOutcome = ({ uuid, outcomeContent, loading }) => {\n    const demoSurveyModel = new Survey.Model(DEMOGRAPHIC_SURVEY_MODEL);\n\n    return (\n        <div>\n            <div className=\"container outcome\">\n                {loading ? (\n                    'Loading more info...'\n                ) : (\n                    <>\n                        <h2>{outcomeContent.title}</h2>\n                        {documentToReactComponents(\n                            outcomeContent.body,\n                            richTextRenderOptions\n                        )}\n                    </>\n                )}\n            </div>\n            <DemographicSurvey surveyModel={demoSurveyModel} uuid={uuid} />\n        </div>\n    );\n};\n\nexport default ScreenerOutcome;\n\nconst richTextRenderOptions = {\n    renderNode: {\n        [BLOCKS.EMBEDDED_ASSET]: (node) => {\n            const { file } = node.data.target.fields;\n            return <img src={file.url} />;\n        },\n    },\n};\n","import * as Survey from 'survey-react';\n\nimport React, { useEffect, useState } from 'react';\n\nimport ScreenerOutcome from './ScreenerOutcome';\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport { putSurveyResult } from '../api/apiSurveyService';\n\nimport { v4 as uuidv4 } from 'uuid';\n\nconst myCss = {\n    navigationButton: 'btn-nav',\n    header: 'header',\n    container: 'container',\n    panel: {\n        footer: 'survey-footer',\n    },\n};\n\nfunction ScreenerSurvey({ surveyModel, version, setScreenerStarted, outcomeContent }) {\n    const [cache, setCache] = useLocalStorage('screenerSurvey', null);\n    const [outcome, setOutcome] = useState('');\n    const [loading, setLoading] = useState(true);\n    const [filteredOutcomeContent, setFilteredOutcomeContent] = useState({});\n    const [page, setPage] = useState(1);\n    const percentProgress = (page / surveyModel.pageCount) * 100;\n\n    useEffect(() => {\n        surveyModel.onComplete.add(handleComplete);\n        surveyModel.onValueChanged.add(handleValueChanged);\n        if (cache?.version === version) {\n            surveyModel.data = cache.data;\n            surveyModel.currentPageNo = cache.currentPageNo;\n            setPage(cache.currentPageNo + 1);\n        } else {\n            setCache({ version });\n        }\n    }, []);\n\n    useEffect(() => {\n        filteredOutcomeContent.id && setLoading(false);\n    }, [filteredOutcomeContent]);\n\n    async function handleComplete(survey) {\n        setPage(surveyModel.pageCount);\n        setOutcome(survey.data.outcome);\n        const foundContentEntry = outcomeContent.find(\n            (item) => item.id === survey.data.outcome\n        );\n        setFilteredOutcomeContent(foundContentEntry);\n        const uuid = uuidv4();\n        if (process.env.REACT_APP_DYNAMO_STORE === 'true') {\n            const res = await putSurveyResult('expunge-screener', {\n                ...survey.data,\n                uuid,\n            });\n            /* TODO: set up cloudwatch error logging */\n        }\n        setCache({ uuid });\n    }\n\n    function handleValueChanged({ currentPageNo, data }) {\n        setPage(currentPageNo + 1);\n        setCache({ ...cache, currentPageNo, data });\n    }\n\n    function reset() {\n        surveyModel.clear();\n        setCache(null);\n        setLoading(true);\n        setFilteredOutcomeContent({});\n        setOutcome(null);\n        setPage(1);\n        setScreenerStarted(false);\n    }\n\n    return (\n        <div className=\"main\">\n            {outcome ? (\n                <ScreenerOutcome\n                    uuid={cache?.uuid}\n                    outcomeContent={filteredOutcomeContent}\n                    loading={loading}\n                />\n            ) : (\n                <>\n                    <ProgressBar percent={percentProgress} />\n                    <Survey.Survey css={myCss} model={surveyModel} />\n                </>\n            )}\n\n            <div className=\"text-center\">\n                <button onClick={reset} className=\"btn-nav\">\n                    Reset\n                </button>\n            </div>\n        </div>\n    );\n}\n\nconst ProgressBar = ({ percent }) => {\n    return (\n        <div className=\"progress-container\">\n            <div className=\"progress-value\" style={{ width: `${percent}%` }}></div>\n            <div className=\"progress-background\"></div>\n        </div>\n    );\n};\n\nexport default ScreenerSurvey;\n","import { useState } from 'react';\n\nexport default function useLocalStorage(key, initialValue) {\n    const [storedValue, setStoredValue] = useState(() => {\n        try {\n            const item = window.localStorage.getItem(key);\n            return item ? JSON.parse(item) : initialValue;\n        } catch (error) {\n            console.log(error);\n            return initialValue;\n        }\n    });\n\n    const setValue = (value) => {\n        try {\n            const valueToStore = value instanceof Function ? value(storedValue) : value;\n            setStoredValue(valueToStore);\n            window.localStorage.setItem(key, JSON.stringify(valueToStore));\n        } catch (error) {\n            console.log(error);\n        }\n    };\n    return [storedValue, setValue];\n}\n","export default __webpack_public_path__ + \"static/media/logo.e3327099.png\";","import React from 'react';\nimport { BLOCKS } from '@contentful/rich-text-types';\nimport { documentToReactComponents } from '@contentful/rich-text-react-renderer';\n\nconst IntroScreen = ({ setScreenerStarted, introContent }) => {\n    return (\n        <div className=\"container\">\n            <h2>{introContent.title}</h2>\n            <p>\n                {documentToReactComponents(\n                    introContent.description,\n                    richTextRenderOptions\n                )}\n            </p>\n            <button className=\"btn-nav\" onClick={() => setScreenerStarted(true)}>\n                Next\n            </button>\n        </div>\n    );\n};\n\nexport default IntroScreen;\n\nconst richTextRenderOptions = {\n    renderNode: {\n        [BLOCKS.EMBEDDED_ASSET]: (node) => {\n            const { file } = node.data.target.fields;\n            return <img src={file.url} />;\n        },\n    },\n};\n","import axios from 'axios';\n\nconst DEV_URL = 'https://7h8jqdiilc.execute-api.us-west-2.amazonaws.com/dev'; //obviously change this later\n\nasync function getContent() {\n    const content = await axios.get(`${DEV_URL}/content`);\n    return content;\n}\n\nexport { getContent };\n","import React, { useState, useEffect } from 'react';\nimport jsSHA from 'jssha';\nimport * as Survey from 'survey-react';\nimport SCREENER_SURVEY_MODEL from './data/screenerModel.js';\nimport ScreenerSurvey from './Components/ScreenerSurvey';\nimport logo from './assets/logo.png';\nimport './App.scss';\nimport IntroScreen from './Components/IntroScreen.js';\nimport { getContent } from './api/apiContentService';\n\nconst surveyModel = new Survey.Model(SCREENER_SURVEY_MODEL);\nsurveyModel.showPreviewBeforeComplete = 'showAnsweredQuestions';\n\n// * uncomment next line for console debugging\n// window.survey = surveyModel;\n\nconst shaObj = new jsSHA('SHA-1', 'TEXT');\n// this creates a hash from the stringified survey model so we can version it (know if it changed)\nshaObj.update(JSON.stringify(SCREENER_SURVEY_MODEL));\nconst hash = shaObj.getHash('HEX');\n\nexport default () => {\n    const [screenerStarted, setScreenerStarted] = useState(false);\n    const [outcomeContent, setOutcomeContent] = useState(null);\n    const [introContent, setIntroContent] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(false);\n\n    useEffect(async () => {\n        setLoading(true);\n        try {\n            const res = await getContent();\n            const introEntry = res.data.find((item) => item.fields.id === 'intro').fields;\n            setIntroContent(introEntry);\n            const outcomeEntries = res.data\n                .filter((item) => item.sys.contentType.sys.id === 'screenerOutcome')\n                .map((item) => item.fields);\n            setOutcomeContent(outcomeEntries);\n        } catch (e) {\n            console.log(e);\n            setError(true);\n        } finally {\n            setLoading(false);\n        }\n    }, []);\n\n    return (\n        <React.StrictMode>\n            <div className=\"app\">\n                <img src={logo} className=\"logo\" />\n                <h1 className=\"text-center\">Record seal eligibility screener</h1>\n                {screenerStarted ? (\n                    <ScreenerSurvey\n                        surveyModel={surveyModel}\n                        version={hash}\n                        setScreenerStarted={setScreenerStarted}\n                        outcomeContent={outcomeContent}\n                    />\n                ) : (\n                    <>\n                        {loading && 'Loading more info...'}\n                        {introContent && (\n                            <>\n                                <IntroScreen\n                                    setScreenerStarted={setScreenerStarted}\n                                    introContent={introContent}\n                                />\n                            </>\n                        )}\n                        {error && (\n                            <>\n                                <h4>\n                                    Unable to load additional information. Please contact\n                                    us at{' '}\n                                    <a href=\"https://expungecolorado.org\">\n                                        expungecolorado.org\n                                    </a>\n                                </h4>\n                            </>\n                        )}\n                    </>\n                )}\n            </div>\n        </React.StrictMode>\n    );\n};\n","import ReactDOM from 'react-dom';\nimport React from 'react';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}